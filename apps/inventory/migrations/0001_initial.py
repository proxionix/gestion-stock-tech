# Generated by Django 5.2.5 on 2025-08-30 12:12

import apps.inventory.models
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Article",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "reference",
                    models.CharField(
                        help_text="Unique product reference",
                        max_length=50,
                        unique=True,
                        verbose_name="Reference",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("PCS", "Piece"),
                            ("M", "Meter"),
                            ("KG", "Kilogram"),
                            ("L", "Liter"),
                            ("BOX", "Box"),
                            ("ROLL", "Roll"),
                            ("SET", "Set"),
                        ],
                        default="PCS",
                        max_length=10,
                        verbose_name="Unit of measurement",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Inactive articles cannot be ordered",
                        verbose_name="Active",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Category"
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Manufacturer"
                    ),
                ),
                (
                    "model_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Model number"
                    ),
                ),
                (
                    "safety_stock",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Minimum stock level recommended",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Safety stock",
                    ),
                ),
                (
                    "cost_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Cost price",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article",
                "verbose_name_plural": "Articles",
                "db_table": "inventory_article",
                "ordering": ["reference"],
                "indexes": [
                    models.Index(
                        fields=["reference"], name="inventory_a_referen_28db72_idx"
                    ),
                    models.Index(fields=["name"], name="inventory_a_name_2569d0_idx"),
                    models.Index(
                        fields=["category"], name="inventory_a_categor_ce2068_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="inventory_a_is_acti_21106f_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ArticleQR",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "payload_url",
                    models.CharField(
                        help_text="URL encoded in QR code",
                        max_length=200,
                        verbose_name="QR payload URL",
                    ),
                ),
                (
                    "png_file",
                    models.ImageField(
                        help_text="Generated QR code PNG file",
                        upload_to=apps.inventory.models.qr_upload_path,
                        verbose_name="QR code image",
                    ),
                ),
                (
                    "article",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_code",
                        to="inventory.article",
                        verbose_name="Article",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article QR Code",
                "verbose_name_plural": "Article QR Codes",
                "db_table": "inventory_article_qr",
            },
        ),
        migrations.CreateModel(
            name="StockTech",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Quantity",
                    ),
                ),
                (
                    "reserved_qty",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Quantity reserved for approved demands",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Reserved quantity",
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tech_stocks",
                        to="inventory.article",
                        verbose_name="Article",
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        limit_choices_to={"role": "TECH"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stock_items",
                        to="users.profile",
                        verbose_name="Technician",
                    ),
                ),
            ],
            options={
                "verbose_name": "Technician Stock",
                "verbose_name_plural": "Technician Stocks",
                "db_table": "inventory_stock_tech",
                "indexes": [
                    models.Index(
                        fields=["technician"], name="inventory_s_technic_894c6c_idx"
                    ),
                    models.Index(
                        fields=["article"], name="inventory_s_article_779385_idx"
                    ),
                    models.Index(
                        fields=["quantity"], name="inventory_s_quantit_4d4bf9_idx"
                    ),
                ],
                "unique_together": {("technician", "article")},
            },
        ),
        migrations.CreateModel(
            name="Threshold",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "min_qty",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Alert when stock falls below this level",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Minimum quantity",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "last_alert_sent",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last alert sent"
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="thresholds",
                        to="inventory.article",
                        verbose_name="Article",
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        limit_choices_to={"role": "TECH"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="thresholds",
                        to="users.profile",
                        verbose_name="Technician",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock Threshold",
                "verbose_name_plural": "Stock Thresholds",
                "db_table": "inventory_threshold",
                "indexes": [
                    models.Index(
                        fields=["technician"], name="inventory_t_technic_f21e7c_idx"
                    ),
                    models.Index(
                        fields=["article"], name="inventory_t_article_4553b5_idx"
                    ),
                    models.Index(
                        fields=["is_active"], name="inventory_t_is_acti_acd3d0_idx"
                    ),
                ],
                "unique_together": {("technician", "article")},
            },
        ),
    ]
