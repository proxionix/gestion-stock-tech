# Generated by Django 5.2.5 on 2025-08-30 12:15

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("inventory", "0001_initial"),
        ("orders", "0001_initial"),
        ("users", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="EventLog",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        help_text="Model name of the affected entity",
                        max_length=50,
                        verbose_name="Entity type",
                    ),
                ),
                (
                    "entity_id",
                    models.CharField(
                        help_text="Primary key of the affected entity",
                        max_length=36,
                        verbose_name="Entity ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        help_text="What action was performed",
                        max_length=50,
                        verbose_name="Action",
                    ),
                ),
                (
                    "before_data",
                    models.JSONField(
                        blank=True,
                        help_text="Entity state before the change",
                        null=True,
                        verbose_name="Before data",
                    ),
                ),
                (
                    "after_data",
                    models.JSONField(
                        blank=True,
                        help_text="Entity state after the change",
                        null=True,
                        verbose_name="After data",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Timestamp"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="IP address"
                    ),
                ),
                ("user_agent", models.TextField(blank=True, verbose_name="User agent")),
                (
                    "request_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique request identifier for correlation",
                        max_length=36,
                        verbose_name="Request ID",
                    ),
                ),
                (
                    "prev_hash",
                    models.CharField(
                        blank=True,
                        help_text="Hash of the previous audit record",
                        max_length=64,
                        verbose_name="Previous record hash",
                    ),
                ),
                (
                    "record_hash",
                    models.CharField(
                        editable=False,
                        help_text="SHA-256 hash of this record",
                        max_length=64,
                        unique=True,
                        verbose_name="Record hash",
                    ),
                ),
                (
                    "actor_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="audit_events",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Actor user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event Log",
                "verbose_name_plural": "Event Logs",
                "db_table": "audit_event_log",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["actor_user"], name="audit_event_actor_u_2752f1_idx"
                    ),
                    models.Index(
                        fields=["entity_type", "entity_id"],
                        name="audit_event_entity__a96fa3_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="audit_event_timesta_4a8741_idx"
                    ),
                    models.Index(
                        fields=["action"], name="audit_event_action_083915_idx"
                    ),
                    models.Index(
                        fields=["request_id"], name="audit_event_request_ee6b6d_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StockMovement",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "delta",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Positive for increase, negative for decrease",
                        max_digits=10,
                        verbose_name="Quantity change",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("ISSUE", "Issue/Usage"),
                            ("RECEIPT", "Receipt from demand"),
                            ("ADJUST", "Manual adjustment"),
                            ("TRANSFER", "Transfer between technicians"),
                            ("INITIAL", "Initial stock"),
                        ],
                        max_length=20,
                        verbose_name="Reason",
                    ),
                ),
                (
                    "location_text",
                    models.TextField(
                        blank=True,
                        help_text="Where the material was used or stored",
                        verbose_name="Location/Usage description",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Timestamp"
                    ),
                ),
                (
                    "balance_after",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Balance after movement",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "record_hash",
                    models.CharField(
                        editable=False,
                        help_text="SHA-256 hash of this record",
                        max_length=64,
                        verbose_name="Record hash",
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stock_movements",
                        to="inventory.article",
                        verbose_name="Article",
                    ),
                ),
                (
                    "linked_demande",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stock_movements",
                        to="orders.demande",
                        verbose_name="Related demand",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="performed_movements",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Performed by",
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        limit_choices_to={"role": "TECH"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stock_movements",
                        to="users.profile",
                        verbose_name="Technician",
                    ),
                ),
            ],
            options={
                "verbose_name": "Stock Movement",
                "verbose_name_plural": "Stock Movements",
                "db_table": "audit_stock_movement",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["technician", "article"],
                        name="audit_stock_technic_cb04b3_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="audit_stock_timesta_c9b1e4_idx"
                    ),
                    models.Index(
                        fields=["reason"], name="audit_stock_reason_72884b_idx"
                    ),
                    models.Index(
                        fields=["linked_demande"], name="audit_stock_linked__fdc82f_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ThresholdAlert",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "current_stock",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Current stock level",
                    ),
                ),
                (
                    "threshold_level",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Threshold level",
                    ),
                ),
                (
                    "alert_sent_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Alert sent at"
                    ),
                ),
                (
                    "alert_method",
                    models.CharField(
                        choices=[
                            ("EMAIL", "Email"),
                            ("SYSTEM", "System notification"),
                            ("SMS", "SMS"),
                        ],
                        default="SYSTEM",
                        max_length=20,
                        verbose_name="Alert method",
                    ),
                ),
                (
                    "acknowledged",
                    models.BooleanField(default=False, verbose_name="Acknowledged"),
                ),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Acknowledged at"
                    ),
                ),
                (
                    "article",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="threshold_alerts",
                        to="inventory.article",
                        verbose_name="Article",
                    ),
                ),
                (
                    "technician",
                    models.ForeignKey(
                        limit_choices_to={"role": "TECH"},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="threshold_alerts",
                        to="users.profile",
                        verbose_name="Technician",
                    ),
                ),
            ],
            options={
                "verbose_name": "Threshold Alert",
                "verbose_name_plural": "Threshold Alerts",
                "db_table": "audit_threshold_alert",
                "ordering": ["-alert_sent_at"],
                "indexes": [
                    models.Index(
                        fields=["technician", "article"],
                        name="audit_thres_technic_332dcb_idx",
                    ),
                    models.Index(
                        fields=["alert_sent_at"], name="audit_thres_alert_s_807300_idx"
                    ),
                    models.Index(
                        fields=["acknowledged"], name="audit_thres_acknowl_bdb56e_idx"
                    ),
                ],
            },
        ),
    ]
